package model;

import java.util.List;
import java.util.LinkedList;

public class Memory{
/*
    Memória:

    - Vai ter um tamanho de quadros e funções para retornar um quadro inteiro;
    -- Vai ter uma função para retornar o número de bytes em cada quadro;
    - Vai manter informações sobre quadros usados e quadros vazios;
    -- Get próximo quadro vazio;
    -- ToString() que devolve a memória (o array bonitinho)
    - Vai ter uma função que devolve um quadro, baseado no seu "index"; (calculo on the fly)

     (memória / quadros)


    Informe a quantidade de posições na memória??? só pode ser par
    
        (informe em bytes) validar para ser multiplo de 256


*/

    private LinkedList<MemoryPosition> phisicalMemory;
    private HashMap<Object, LinkedList<MemoryPosition>> mapBoards; 

    // mandar exceção se o calculo tiver errado
    public Memory(int size, int boardSize) { //VALIDAR SE SIZE TA CRIANDO O NUMERO CORRETO
        this.phisicalMemory = new LinkedList<MemoryPosition>();

        for (int i = 0; i < size; i++) {
            this.phisicalMemory.add(new MemoryPosition());
        }

        System.out.println("===================   Checando tamanho memoria");
        System.out.println("Tamanho desejado = " + size);
        System.out.println("Tamanho real = " + phisicalMemory.size());


        boardSize = (size / boardSize);
        // board size têm que ser a quantidade de quadros

        mapBoards = new HashMap<Object, LinkedList<MemoryPosition>>();

        for (int i = 0; i < boardSize; i++) {
            int initialPosition = (size / boardSize) * i;// (memória / quadros) alocação maxima de quadros
            int endPosition = ((size / boardSize) * (i+1)) - 1;

            LinkedList<MemoryPosition> subList = new LinkedList<MemoryPosition>();

            for (int j = initialPosition; j < endPosition; j++) {
                subList.add(phisicalMemory.get(j));
            }

            mapBoards.put(i, subList);
        }

        System.out.println("===================   Checando Numero quadros");
        System.out.println("Numero esperado: " + boardSize);
        System.out.println("Numero obtido: " + mapBoards.size());
        
    }

    // Saber quantas posições foram usadas em um determinado quadro
    public int countPositionsOnBoard(int boardIndex) {
        
    }

    // Saber quantos quadros existem
    public int countBoards() {
        
    }

    // Saber quantos quadros estão usados
    public int countUsedBoards(){
        
    }

    // Saber quantos quadros estão disponíveis
    public int countAvailableBoards(){
        return this.mapBoards.size() - this.countUsedBoards();
    }

    public boolean update
    // Alterar próximo quadro vazio
    // Alterar o número de posições utilizadas em um quadro
    // ToString retornando os quadros com suas posições usadas


    //getQuadro(int numeroQuadro)
    //


    
        getQuadro(3)

 tamanhoQuadro  phisicalMemory.Lenght / numQuadros

 3 * tamanho Quadro


}